require 'yaml'

fastlane_version "1.0.2"

desc "Run all iOS tests on an iPad"
lane :test do
  xcodebuild(
    build: true,
    test: true,
    destination: "OS=8.1,name=iPad Air"
  )
end

desc "Set all the API keys required for distribution"
lane :oss do
  keys = ['ArtsyAPIClientSecret', 
    'ArtsyAPIClientKey', 
    'HockeyProductionSecret', 
    'HockeyBetaSecret', 
    'MixpanelProductionAPIClientKey', 
    'MixpanelStagingAPIClientKey', 
    'CardflightStagingAPIClientKey', 
    'CardflightStagingMerchantAccountToken', 
    'StripeStagingPublishableKey', 
    'CardflightProductionAPIClientKey', 
    'CardflightProductionMerchantAccountToken', 
    'StripeProductionPublishableKey']

    commands = keys.map { |key|
      command = "bundle exec pod keys set #{key} '-'"
      if key == keys.first
        command += " Eidolon"
      end

      command
    }.join(' ; ')

    sh "cd .. ; #{commands}"

    cocoapods
end

desc "Release a new beta version on Hockey"
desc "This action does the following:"
desc ""
desc "- Ensures a clean git status"
desc "- Increment the build number"
desc "- Build and sign the app"
desc "- Upload the ipa file to hockey"
desc "- Post a message to slack containing the download link"
desc "- Commit and push the version bump"
lane :deploy do 
  # Make sure we start off with a clean slate
  ensure_git_status_clean

  # Increment build number to current date
  build_number = Time.new.strftime("%Y.%m.%d")
  increment_build_number build_number: build_number

  # Set version number to the one at the top of the CHANGELOG
  changelog = YAML.load_file('../CHANGELOG.yml')
  version_number = changelog['upcoming']['version']

  # Generate release notes from CHANGELOG
  release_notes = changelog['upcoming']['notes'].map{ |note| note.prepend '- ' }.join("\n")

  # Increment to the changelog version number
  increment_version_number version_number: version_number

  # It would be cool to reserialize a new changelog out, but it looses some human readability :\

  sigh

  ENV["PROFILE_UDID"] = lane_context[SharedValues::SIGH_UDID]

  # Build
  gym(
    scheme: "Kiosk",
  )

  # Push to Hockey
  hockey(
    api_token: ENV['HOCKEY_API_TOKEN'],
    notes: release_notes,
  )

  # Post message to slack
  slack(
    message: "There is a new version of the Kiosk app available. Download it at http://artsy.net/kioskbeta",
    success: true,        # optional, defaults to true
    payload: {            # optional, lets you specify any number of your own Slack attachments
      'Version' => version_number,
      'What\'s new' => release_notes,
    },
    default_payloads: [],
  )

  # Make sure our directory is clean, except for changes Fastlane has made
  clean_build_artifacts

  # Tag release and push to GitHub
  commit_version_bump message: "Deploying version #{version_number}."
  add_git_tag tag: version_number
  push_to_git_remote
end

desc "Updates the storyboard identifier Swift values."
lane :storyboard_ids do
  sh "cd .. ; bundle exec sbconstants Kiosk/Storyboards/StoryboardIdentifiers.swift --source-dir Kiosk/Storyboards --swift"
end

before_all do |lane|

  # Ensure no deploys with OSS keys
  require 'cocoapods-core'
  puts "Validating CocoaPods Keys"
  Dir.chdir ".." do
    podfile = Pod::Podfile.from_file "Podfile"
    target = podfile.plugins["cocoapods-keys"]["target"] || ""
    podfile.plugins["cocoapods-keys"]["keys"].each do |key|
      puts " - #{key}"

        value = `bundle exec pod keys get #{key} #{target}`
        value = value.split("]").last.strip

      if value == "-" || value == ""
        puts "Did not pass validation for key #{key}."
        puts "Run `bundle exec pod keys get #{key} #{target}` to see what it is."
        puts "It's likely this is running with OSS keys."
        exit()
      end
    end
  end
end

